import { supabase } from "../config/supabaseClient.js";

// Add SubStore
export async function addSubStore(req, res) {
Â  try {
Â  Â  const { name, link } = req.body;
Â  Â  const imageFile = req.file; // multer middleware for file upload

Â  Â  let imageUrl = null;

Â  Â  if (imageFile) {
Â  Â  Â  const fileExt = imageFile.originalname.split(".").pop();
Â  Â  Â  const fileName = `${Date.now()}_${Math.random()
Â  Â  Â  Â  .toString(36)
Â  Â  Â  Â  .substr(2, 9)}.${fileExt}`;

Â  Â  Â  const { error: uploadError } = await supabase.storage
Â  Â  Â  Â  .from("SubStore") // ðŸŽ¯ bucket name
Â  Â  Â  Â  .upload(fileName, imageFile.buffer, {
Â  Â  Â  Â  Â  contentType: imageFile.mimetype,
Â  Â  Â  Â  Â  upsert: true,
Â  Â  Â  Â  });

Â  Â  Â  if (uploadError)
Â  Â  Â  Â  return res.status(400).json({ success: false, error: uploadError.message });

Â  Â  Â  const { data: urlData } = supabase.storage.from("SubStore").getPublicUrl(fileName); // ðŸŽ¯ bucket name
Â  Â  Â  imageUrl = urlData.publicUrl;
Â  Â  }

Â  Â  const { data, error } = await supabase
Â  Â  Â  .from("SubStore") // ðŸŽ¯ table name
Â  Â  Â  .insert([{ name, link, image: imageUrl }]) // using "image" column consistently
Â  Â  Â  .select()
Â  Â  Â  .single();

Â  Â  if (error) return res.status(400).json({ success: false, error: error.message });
Â  Â  res.status(201).json({ success: true, store: data });
Â  } catch (err) {
Â  Â  res.status(500).json({ success: false, error: err.message });
Â  }
}

// Update SubStore
export async function updateSubStore(req, res) {
Â  try {
Â  Â  const { id } = req.params;
Â  Â  const { name, link } = req.body;
Â  Â  const imageFile = req.file;

Â  Â  let updateData = { name, link };

Â  Â  if (imageFile) {
Â  Â  Â  const fileExt = imageFile.originalname.split(".").pop();
Â  Â  Â  const fileName = `${Date.now()}_${Math.random()
Â  Â  Â  Â  .toString(36)
Â  Â  Â  Â  .substr(2, 9)}.${fileExt}`;

Â  Â  Â  const { error: uploadError } = await supabase.storage
Â  Â  Â  Â  .from("SubStore") // ðŸŽ¯ bucket name
Â  Â  Â  Â  .upload(fileName, imageFile.buffer, {
Â  Â  Â  Â  Â  contentType: imageFile.mimetype,
Â  Â  Â  Â  Â  upsert: true,
Â  Â  Â  Â  });

Â  Â  Â  if (uploadError)
Â  Â  Â  Â  return res.status(400).json({ success: false, error: uploadError.message });

Â  Â  Â  const { data: urlData } = supabase.storage.from("SubStore").getPublicUrl(fileName); // ðŸŽ¯ bucket name
Â  Â  Â  updateData.image = urlData.publicUrl; // consistent column name
Â  Â  }

Â  Â  const { data, error } = await supabase
Â  Â  Â  .from("SubStore") // ðŸŽ¯ table name
Â  Â  Â  .update(updateData)
Â  Â  Â  .eq("id", id)
Â  Â  Â  .select()
Â  Â  Â  .single();

Â  Â  if (error) return res.status(400).json({ success: false, error: error.message });
Â  Â  res.json({ success: true, store: data });
Â  } catch (err) {
Â  Â  res.status(500).json({ success: false, error: err.message });
Â  }
}

// Delete SubStore
export async function deleteSubStore(req, res) {
Â  try {
Â  Â  const { id } = req.params;

Â  Â  const { error } = await supabase.from("SubStore").delete().eq("id", id); // ðŸŽ¯ table name

Â  Â  if (error) return res.status(400).json({ success: false, error: error.message });
Â  Â  res.json({ success: true, message: "Store deleted successfully" });
Â  } catch (err) {
Â  Â  res.status(500).json({ success: false, error: err.message });
Â  }
}

// View All SubStores
export async function getAllSubStores(req, res) {
Â  try {
Â  Â  const { data, error } = await supabase.from("SubStore").select("*"); // ðŸŽ¯ table name

Â  Â  if (error) return res.status(400).json({ success: false, error: error.message });
Â  Â  res.json({ success: true, stores: data });
Â  } catch (err) {
Â  Â  res.status(500).json({ success: false, error: err.message });
Â  }
}