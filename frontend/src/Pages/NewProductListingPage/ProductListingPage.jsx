import React, { useEffect, useState } from "react";
import { useParams, Link, useLocation, useNavigate } from "react-router-dom";
import axios from "axios";
import {
Â  getYouMayLikeProducts,
Â  getAllProducts,
Â  addToCart,
Â  getProductsForRecommendedStore,
Â  getProductsForBrand,
Â  fetchRecommendedStores,
Â  fetchProductsForBannerGroup,
Â  fetchUniqueSectionsByType,
Â  fetchProductsForUniqueSection,
Â  getProductEnquiryStatus,
Â  // ðŸŽ¯ IMPORT NEW ENQUIRY CREATION FUNCTION
Â  createSingleProductEnquiry, 
} from "../../utils/supabaseApi";
import { useAuth } from "../../contexts/AuthContext";
import { SlidersHorizontal, ArrowUpDown } from "lucide-react";

const ProductListingPage = () => {
Â  const { Name } = useParams();
Â  const [products, setProducts] = useState([]);
Â  const { id } = useParams();
Â  const location = useLocation();
Â  const navigate = useNavigate();

Â  // Handle both store and brand data from location.state
Â  const {
Â  Â  selectedStore,
Â  Â  allStores,
Â  Â  selectedBrand,
Â  Â  allBrands
Â  } = location.state || {};

Â  const [loading, setLoading] = useState(true);
Â  const { currentUser } = useAuth();
Â  const [addingToCart, setAddingToCart] = useState(null);

Â  // NEW: keep productId -> enquiry boolean map
Â  const [enquiryStatusMap, setEnquiryStatusMap] = useState({});

Â  // State for stores/brands (fallback if not in location.state)
Â  const [storesData, setStoresData] = useState(allStores || []);
Â  const [brandsData, setBrandsData] = useState(allBrands || []);
Â  const [currentStore, setCurrentStore] = useState(selectedStore || null);
Â  const [currentBrand, setCurrentBrand] = useState(selectedBrand || null);

Â  // Update current store/brand when URL params change
Â  useEffect(() => {
Â  Â  if (Name === "shop-by-product" && id && storesData.length > 0) {
Â  Â  Â  const foundStore = storesData.find(store => store.id === parseInt(id));
Â  Â  Â  if (foundStore) {
Â  Â  Â  Â  setCurrentStore(foundStore);
Â  Â  Â  }
Â  Â  } else if (Name === "shopbybrand" && id && brandsData.length > 0) {
Â  Â  Â  const foundBrand = brandsData.find(brand => brand.id === parseInt(id));
Â  Â  Â  if (foundBrand) {
Â  Â  Â  Â  setCurrentBrand(foundBrand);
Â  Â  Â  }
Â  Â  }
Â  }, [Name, id, storesData, brandsData]);

Â  // Update current store/brand when location.state changes (navigation with state)
Â  useEffect(() => {
Â  Â  if (selectedStore) {
Â  Â  Â  setCurrentStore(selectedStore);
Â  Â  }
Â  Â  if (selectedBrand) {
Â  Â  Â  setCurrentBrand(selectedBrand);
Â  Â  }
Â  Â  if (allStores) {
Â  Â  Â  setStoresData(allStores);
Â  Â  }
Â  Â  if (allBrands) {
Â  Â  Â  setBrandsData(allBrands);
Â  Â  }
Â  }, [selectedStore, selectedBrand, allStores, allBrands]);

Â  // Fetch stores/brands if not available in location.state
Â  useEffect(() => {
Â  Â  const fetchData = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  if (Name === "shop-by-product" && storesData.length === 0) {
Â  Â  Â  Â  Â  const stores = await fetchRecommendedStores();
Â  Â  Â  Â  Â  const formattedStores = stores.map(store => ({
Â  Â  Â  Â  Â  Â  id: store.id,
Â  Â  Â  Â  Â  Â  label: store.name,
Â  Â  Â  Â  Â  Â  image: store.image_url,
Â  Â  Â  Â  Â  }));
Â  Â  Â  Â  Â  setStoresData(formattedStores);

Â  Â  Â  Â  Â  // Set current store after fetching if we have an id
Â  Â  Â  Â  Â  if (id) {
Â  Â  Â  Â  Â  Â  const foundStore = formattedStores.find(store => store.id === parseInt(id));
Â  Â  Â  Â  Â  Â  if (foundStore) {
Â  Â  Â  Â  Â  Â  Â  setCurrentStore(foundStore);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } else if (Name === "shopbybrand" && brandsData.length === 0) {
Â  Â  Â  Â  Â  const response = await axios.get("https://ecommerce-8342.onrender.com/api/brand/list");
Â  Â  Â  Â  Â  const formattedBrands = response.data.brands.map(brand => ({
Â  Â  Â  Â  Â  Â  id: brand.id,
Â  Â  Â  Â  Â  Â  label: brand.name,
Â  Â  Â  Â  Â  Â  img: brand.image_url,
Â  Â  Â  Â  Â  Â  tag: "Featured",
Â  Â  Â  Â  Â  }));
Â  Â  Â  Â  Â  setBrandsData(formattedBrands);

Â  Â  Â  Â  Â  // Set current brand after fetching if we have an id
Â  Â  Â  Â  Â  if (id) {
Â  Â  Â  Â  Â  Â  const foundBrand = formattedBrands.find(brand => brand.id === parseInt(id));
Â  Â  Â  Â  Â  Â  if (foundBrand) {
Â  Â  Â  Â  Â  Â  Â  setCurrentBrand(foundBrand);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Failed to fetch data:", error);
Â  Â  Â  }
Â  Â  };

Â  Â  fetchData();
Â  }, [Name]); // Removed dependencies to prevent infinite loops

Â  useEffect(() => {
Â  Â  async function fetchProducts() {
Â  Â  Â  setLoading(true);
Â  Â  Â  let result;
Â  Â  Â  if (Name === "you-may-like") {
Â  Â  Â  Â  result = await getYouMayLikeProducts();
Â  Â  Â  } else if (Name === "shop-by-product") {
Â  Â  Â  Â  result = await getProductsForRecommendedStore(id);
Â  Â  Â  } else if (Name === "shopbybrand") {
Â  Â  Â  Â  result = await getProductsForBrand(id);
Â  Â  Â  } else if (Name === "discount") {
Â  Â  Â  Â  result = await fetchProductsForBannerGroup(id);
Â  Â  Â  } else if (Name === "offers") {
Â  Â  Â  Â  result = await fetchProductsForBannerGroup(id);
Â  Â  Â  } else if (Name === "deals") {
Â  Â  Â  Â  result = await fetchProductsForBannerGroup(id);
Â  Â  Â  } else if (Name === "summer-sale") {
Â  Â  Â  Â  result = await fetchProductsForBannerGroup(id);
Â  Â  Â  } else if (Name === "opening-soon") {
Â  Â  Â  Â  result = await fetchProductsForBannerGroup(id);
Â  Â  Â  } else if (Name === "sectionOne") {
Â  Â  Â  Â  result = await fetchProductsForBannerGroup(id);
Â  Â  Â  } else if (Name === "best-quality") {
Â  Â  Â  Â  const sections = await fetchUniqueSectionsByType("Best quality");
Â  Â  Â  Â  const productGroups = await Promise.all(
Â  Â  Â  Â  Â  sections.map((s) => fetchProductsForUniqueSection(s.id))
Â  Â  Â  Â  );
Â  Â  Â  Â  result = productGroups.flat();
Â  Â  Â  } else if (Name == "new-menu") {
Â  Â  Â  Â  const sections = await fetchUniqueSectionsByType("New Menu");
Â  Â  Â  Â  const productGroups = await Promise.all(
Â  Â  Â  Â  Â  sections.map((s) => fetchProductsForUniqueSection(s.id))
Â  Â  Â  Â  );
Â  Â  Â  Â  result = productGroups.flat();
Â  Â  Â  } else {
Â  Â  Â  Â  result = await getAllProducts();
Â  Â  Â  }

Â  Â  Â  if (result && result.success !== false) {
Â  Â  Â  Â  setProducts(result.products || result);
Â  Â  Â  }
Â  Â  Â  setLoading(false);
Â  Â  }

Â  Â  fetchProducts();
Â  }, [Name, id]);

Â  // NEW: fetch enquiry status for all currently loaded products
Â  useEffect(() => {
Â  Â  let isCancelled = false;

Â  Â  const loadEnquiryStatuses = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  if (!products || products.length === 0) {
Â  Â  Â  Â  Â  setEnquiryStatusMap({});
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  // NOTE: This is inefficient (N+1 queries), but matches the pattern requested. 
        // A single bulk fetch function would be better.
Â  Â  Â  Â  const entries = await Promise.all(
Â  Â  Â  Â  Â  products.map(async (p) => {
Â  Â  Â  Â  Â  Â  try {
                // Ensure the function is called correctly (assuming it returns {success, productEnquiryStatuses: [{id, enquiry}]} )
                const { success, productEnquiryStatuses } = await getProductEnquiryStatus();
                if (success) {
                    const status = productEnquiryStatuses.find(s => s.id === p.id);
                    return [p.id, status?.enquiry ?? false];
                }
Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  } catch {
Â  Â  Â  Â  Â  Â  Â  return [p.id, false]; // fallback if any error
Â  Â  Â  Â  Â  Â  }
              return [p.id, false];
Â  Â  Â  Â  Â  })
Â  Â  Â  Â  );

Â  Â  Â  Â  if (!isCancelled) {
Â  Â  Â  Â  Â  const map = Object.fromEntries(entries);
Â  Â  Â  Â  Â  setEnquiryStatusMap(map);
Â  Â  Â  Â  }
Â  Â  Â  } catch (e) {
Â  Â  Â  Â  console.error("Failed to load enquiry statuses", e);
Â  Â  Â  }
Â  Â  };

Â  Â  loadEnquiryStatuses();

Â  Â  return () => {
Â  Â  Â  isCancelled = true;
Â  Â  };
Â  }, [products]);

Â  const handleStoreClick = (store) => {
Â  Â  setCurrentStore(store); // Update state immediately for better UX
Â  Â  navigate(`/ProductLisingPage/shop-by-product/${store.id}`, {
Â  Â  Â  state: { selectedStore: store, allStores: storesData },
Â  Â  });
Â  };

Â  const handleBrandClick = (brand) => {
Â  Â  setCurrentBrand(brand); // Update state immediately for better UX
Â  Â  navigate(`/ProductLisingPage/shopbybrand/${brand.id}`, {
Â  Â  Â  state: { selectedBrand: brand, allBrands: brandsData },
Â  Â  });
Â  };

Â  // ðŸŽ¯ MODIFIED: handle ADD/ENQUIRY button click
Â  const handleProductAction = async (e, item, isEnquiry) => {
Â  Â  e.preventDefault();
Â  Â  e.stopPropagation();

Â  Â  if (!currentUser) {
Â  Â  Â  alert("Please log in to proceed.");
Â  Â  Â  return;
Â  Â  }

Â  Â  if (isEnquiry) {
        // --- ENQUIRY LOGIC ---
        setAddingToCart(item.id); // Use addingToCart state to disable button

        try {
            const result = await createSingleProductEnquiry({
                user_id: currentUser.id,
                // Use available user info
                name: currentUser.user_metadata?.name || currentUser.email, 
                email: currentUser.email,
                phone: currentUser.user_metadata?.phone || 'N/A', 
                message: `Quick enquiry submitted from product listing page for: ${item.name}`,
                product: {
                    id: item.id,
                    name: item.name,
                    price: item.price,
                    quantity: 1, 
                },
            });

            if (result.success) {
                // Navigate as requested
                navigate("/enquiry-history");
            } else {
                alert(`Failed to submit enquiry: ${result.error}`);
            }
        } catch (error) {
            alert(`An unexpected error occurred: ${error.message}`);
        } finally {
            setAddingToCart(null);
        }
Â  Â  Â    return;
Â  Â  }

Â  Â  // --- ORIGINAL ADD TO CART LOGIC ---
Â  Â  setAddingToCart(item.id);

Â  Â  const { success, error } = await addToCart(currentUser.id, item.id, 1);

Â  Â  if (success) {
Â  Â  Â  window.dispatchEvent(new Event("cartUpdated"));
Â  Â  } else {
Â  Â  Â  alert(`Failed to add item to cart: ${error}`);
Â  Â  }

Â  Â  setAddingToCart(null);
Â  };

Â  const handleEnquiryClick = (e) => {
Â  Â  e.preventDefault();
Â  Â  e.stopPropagation();
Â  Â  navigate("/enquiry-history");
Â  };

Â  const calculateDiscount = (oldPrice, newPrice) => {
Â  Â  if (!oldPrice || !newPrice) return 0;
Â  Â  return Math.round(((oldPrice - newPrice) / oldPrice) * 100);
Â  };

Â  // Determine what type of gallery to show
Â  const isStoreView = Name === "shop-by-product" || Name === "discount";
Â  const isBrandView = Name === "shopbybrand";

Â  const galleryData = isStoreView ? storesData : brandsData;
Â  const currentItem = isStoreView ? currentStore : currentBrand;
Â  const handleItemClick = isStoreView ? handleStoreClick : handleBrandClick;
Â  const galleryTitle = isStoreView ? "Shop By Store" : "Shop By Brand";

Â  if (loading) return <p className="text-center py-10">Loading...</p>;

Â  return (
Â  Â  <div className="bg-gray-50 min-h-screen mt-[-40px]">
Â  Â  Â  <div className="container mx-auto max-w-2xl px-2 py-4">

Â  Â  Â  Â  {/* Slideable Gallery - Different styling for stores vs brands */}
Â  Â  Â  Â  {(isStoreView || isBrandView) && galleryData && galleryData.length > 0 && (
Â  Â  Â  Â  Â  <div className="mb-3">
Â  Â  Â  Â  Â  Â  <h3 className="text-sm font-semibold text-gray-800 mb-1 px-2">
Â  Â  Â  Â  Â  Â  Â  {currentItem ? currentItem.label : galleryTitle}
Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  className="flex gap-2 overflow-x-auto px-2"
Â  Â  Â  Â  Â  Â  Â  style={{ scrollbarWidth: "none", msOverflowStyle: "none" }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  {galleryData.map((item, index) => {
Â  Â  Â  Â  Â  Â  Â  Â  const isSelected = currentItem && item.id === currentItem.id;
Â  Â  Â  Â  Â  Â  Â  Â  const imageSource = isStoreView ? item.image : item.img;

Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={item.id || index}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="flex flex-col items-center flex-shrink-0 cursor-pointer transition-transform hover:scale-105"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleItemClick(item)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`w-16 h-16 overflow-hidden border-2 transition-all duration-200 ${isSelected
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? "border-red-400 ring-2 ring-red-200 shadow-lg"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : "border-gray-200 hover:border-gray-300"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  } ${isBrandView ? "rounded-full" : "rounded-lg"}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  src={imageSource}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  alt={item.label}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full h-full object-cover"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onError={(e) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  e.target.onerror = null;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  e.target.src = "https://placehold.co/64x64?text=Brand";
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`text-xs mt-0.5 text-center max-w-[60px] truncate transition-colors ${isSelected
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? "text-red-600 font-medium"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : "text-gray-700"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.label}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}

Â  Â  Â  Â  {/* Product List */}
Â  Â  Â  Â  {products.length === 0 ? (
Â  Â  Â  Â  Â  <p className="text-center text-gray-500 py-10">No products found.</p>
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <div className="space-y-1">
Â  Â  Â  Â  Â  Â  {products.map((item) => {
Â  Â  Â  Â  Â  Â  Â  const discount = calculateDiscount(item.old_price, item.price);
Â  Â  Â  Â  Â  Â  Â  const isAdding = addingToCart === item.id;
Â  Â  Â  Â  Â  Â  Â  const isEnquiry = !!enquiryStatusMap[item.id];

Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  <Link
Â  Â  Â  Â  Â  Â  Â  Â  Â  key={item.id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  to={`/product/${item.id}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="flex bg-white !ml-0 rounded-lg shadow-sm overflow-hidden transition-shadow hover:shadow-md w-full"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative w-24 h-24 sm:w-28 sm:h-28 flex-shrink-0">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  src={item.image || "https://via.placeholder.com/150"}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  alt={item.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full h-full object-cover rounded-md"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {discount > 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="absolute top-0 left-0 bg-green-600 text-white text-[10px] font-bold px-1.5 py-0.5 rounded">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {discount}% OFF
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="px-3 py-2 flex flex-col flex-grow">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xs text-gray-400 uppercase font-medium">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.category || "Brand"}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-sm font-semibold text-gray-800 line-clamp-2 leading-tight">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-xs text-gray-600 mt-1 border rounded px-2 py-1 w-fit">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.uom ? <p>{item.uom}</p> : <p>1 Variant</p>}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-end">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-base font-bold text-black">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  â‚¹{item.price || "--"}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.old_price && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xs line-through ml-1 text-gray-400">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  â‚¹{item.old_price}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* NEW: Button switches to ENQUIRY if enquiry is true */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isEnquiry ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // ðŸŽ¯ Call the modified handleProductAction
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={(e) => handleProductAction(e, item, isEnquiry)} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{ minHeight: '20px' }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-red-400 text-white text-sm font-bold py-2 px-6 rounded-md hover:bg-red-600 transition-colors"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ENQUIRY
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // ðŸŽ¯ Call the modified handleProductAction
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={(e) => handleProductAction(e, item, isEnquiry)} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isAdding}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{ minHeight: '20px' }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-red-400 text-white text-sm font-bold py-2 px-6 rounded-md hover:bg-red-600 transition-colors disabled:bg-red-300 disabled:cursor-not-allowed"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isAdding ? "Adding..." : "Add"}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default ProductListingPage;