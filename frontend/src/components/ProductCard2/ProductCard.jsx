// src/components/ProductCard2/ProductCard.jsx

import React, { useState, useEffect } from "react";
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from "../../contexts/AuthContext";
// ðŸŽ¯ Import both required functions
import { addToCart, getProductEnquiryStatus } from "../../utils/supabaseApi"; 
import { FaHeart, FaRegHeart } from "react-icons/fa";

const ProductCard = ({
Â  product_id,
Â  id,
Â  image,
Â  second_preview_image,
Â  name,
Â  old_price,
Â  price,
Â  rating,
Â  uom,
Â  isWishlisted,
Â  onToggleWishlist,
}) => {
Â  const [cartLoading, setCartLoading] = useState(false);
Â  const [cartAdded, setCartAdded] = useState(false);
Â  // ðŸŽ¯ State to hold all enquiry statuses fetched from the API
Â  const [enquiryStatuses, setEnquiryStatuses] = useState([]);
Â  const { currentUser } = useAuth();
Â  const navigate = useNavigate();

Â  const displayImage = second_preview_image || image;
Â  const actualProductId = product_id || id;
Â  
Â  // ðŸŽ¯ EFFECT: Fetch the enquiry status for all products on mount
Â  useEffect(() => {
Â  Â  const fetchStatuses = async () => {
Â  Â  Â  const { success, productEnquiryStatuses } = await getProductEnquiryStatus();
Â  Â  Â  if (success) {
Â  Â  Â  Â  setEnquiryStatuses(productEnquiryStatuses);
Â  Â  Â  }
Â  Â  };
Â  Â  fetchStatuses();
Â  Â  // NOTE: This function runs once for EVERY single product card, 
Â  Â  // leading to a performance hit if many cards are rendered.
Â  }, []);


Â  // ðŸŽ¯ DERIVED STATE: Determine if the CURRENT product should show 'ENQUIRY'
Â  const currentProductStatus = enquiryStatuses.find(
Â  Â  (p) => p.id === actualProductId
Â  );
Â  const isEnquiryProduct = currentProductStatus ? currentProductStatus.enquiry : false;


Â  // --- Original Cart Logic ---

Â  const handleAddToCart = async (productIdToUse) => {
Â  Â  if (!currentUser) {
Â  Â  Â  alert("Please login to add items to cart.");
Â  Â  Â  return;
Â  Â  }
Â  Â  if (!productIdToUse) return;

Â  Â  setCartLoading(true);
Â  Â  try {
Â  Â  Â  const { success } = await addToCart(currentUser.id, productIdToUse, 1);
Â  Â  Â  if (success) {
Â  Â  Â  Â  setCartAdded(true);
Â  Â  Â  Â  window.dispatchEvent(new Event('cartUpdated'));
Â  Â  Â  Â  setTimeout(() => setCartAdded(false), 1200);
Â  Â  Â  }
Â  Â  } finally {
Â  Â  Â  setCartLoading(false);
Â  Â  }
Â  };

Â  // ðŸŽ¯ NEW: Wrapper function for the button click
Â  const handleButtonClick = () => {
Â  Â  if (!actualProductId) return;

Â  Â  if (isEnquiryProduct) {
Â  Â  Â  // ðŸŽ¯ FIX 2: Navigate to the specified enquiry history page
Â  Â  Â  navigate(`/enquiry-history`); 
Â  Â  } else {
Â  Â  Â  // If ENQUIRY is false, proceed with cart logic
Â  Â  Â  handleAddToCart(actualProductId);
Â  Â  }
Â  };

Â  return (
Â  Â  <div className="relative bg-white rounded-lg shadow-md overflow-hidden w-full max-w-[140px] h-[210px] flex flex-col">
Â  Â  Â  {/* ðŸ‘‡ Wishlist Button */}
Â  Â  Â  <span>
Â  Â  Â  <button
Â  Â  Â  Â  onClick={onToggleWishlist}
Â  Â  Â  Â  disabled={!currentUser}
Â  Â  Â  Â  className="absolute !min-w-5 top-0 right-0 z-10 bg-opacity-20 rounded-full text-white disabled:opacity-50"
Â  Â  Â  Â  aria-label="Toggle Wishlist"
Â  Â  Â  Â  style={{ minHeight: 27 }}
Â  Â  Â  >
Â  Â  Â  Â  {isWishlisted ? <FaHeart size={16} className="text-pink-500" /> : <FaRegHeart size={16} />}
Â  Â  Â  </button>
Â  Â  Â  </span>

Â  Â  Â  <Link to={`/product/${actualProductId}`}>
Â  Â  Â  Â  <div className="w-full h-[140px] bg-gray-300 flex items-center justify-center overflow-hidden">
Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  src={displayImage}
Â  Â  Â  Â  Â  Â  alt={name}
Â  Â  Â  Â  Â  Â  className="h-full w-full object-cover"
Â  Â  Â  Â  Â  Â  onError={(e) => {
Â  Â  Â  Â  Â  Â  Â  e.target.onerror = null;
Â  Â  Â  Â  Â  Â  Â  e.target.src = "https://placehold.co/100x100?text=Image";
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className="p-3 flex flex-col justify-between flex-grow">
Â  Â  Â  Â  Â  <div className="mt-auto flex flex-col gap-1">
Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  {old_price != 0 && old_price && (
Â  Â  Â  Â  Â  Â  Â  Â  <span className="line-through text-[10px] text-gray-500">â‚¹{old_price}</span>
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  <span className="text-[10px] font-bold text-black truncate">â‚¹{price}</span>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  {uom ? (
Â  Â  Â  Â  Â  Â  <div className="flex flex-col gap-1">
Â  Â  Â  Â  Â  Â  Â  <p className="text-[10px] text-gray-600 lineclamp">{uom}</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <div className="flex flex-col gap-1">
Â  Â  Â  Â  Â  Â  Â  <p className="text-[10px] text-gray-600 lineclamp">1 Variant</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  <div className="flex flex-col gap-1">
Â  Â  Â  Â  Â  Â  <p className="text-[10px] font-bold text-black truncate-2 ">{name}</p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </Link>
Â  Â  Â  <button
Â  Â  Â  Â  onClick={handleButtonClick}
Â  Â  Â  Â  disabled={cartLoading || !currentUser} 
Â  Â  Â  Â  style={{ minHeight: 27 }}
Â  Â  Â  Â  className={`absolute bottom-17.5 right-0 border-2 rounded-md bg-white w-[65px] !h-5 text-center text-black text-sm font-bold ${ // ðŸŽ¯ FIX 1: Increased width to w-[60px]
Â  Â  Â  Â  Â  isEnquiryProduct ? "text-blue-500" : (cartAdded ? "text-green-400" : "text-pink-500")
Â  Â  Â  Â  }`}
Â  Â  Â  >
Â  Â  Â  Â  {/* ðŸŽ¯ Conditionally render button text */}
Â  Â  Â  Â  {isEnquiryProduct ? "ENQUIRY" : (cartAdded ? "âœ”" : "ADD")}
Â  Â  Â  </button>
Â  Â  </div>
Â  );
};

export default ProductCard;